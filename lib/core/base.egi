;;;;;
;;;;;
;;;;; Base
;;;;;
;;;;;

(define $eq
  (matcher-dfs
    {[,$val []
      {[$tgt (if (eq? val tgt)
                 {[]}
                 {})]}]
     [$ [something]
      {[$tgt {tgt}]}]
     }))
  
(define $bool eq)
(define $char eq)
(define $integer eq)
(define $float eq)

;;
;; Utility
;;

(define-type-of $id Any)
(define $id 1#%1)

(define-type-of $fst Any)
(define $fst 2#%1)

(define-type-of $snd Any)
(define $snd 2#%2)

(define-type-of $b.compose Any)
(define $b.compose
  (lambda [$f $g]
    (lambda $x
      (apply g (apply f x)))))

(define-type-of $compose Any)
(define $compose
  (cambda $fs
    (lambda $x
      (foldl 2#(%2 %1) x fs))))

;;(define-type-of $flip Any)
(define $flip (lambda [$fn] (lambda [$x $y] (fn y x))))

(define-type-of $ref Any)
(define $ref
  (lambda [%xa $is]
    (match is (list integer)
      {[<nil> xa]
       [<cons $i $rs> (ref (array-ref xa i) rs)]})))

(define-type-of $eq/m Any)
(define $eq?/m
  (lambda [$a $x $y]
    (match x a
      {[,y #t]
       [_ #f]})))

;;
;; Boolean
;;

(define-type-of $and Any)
(define $and (cambda $bs (foldl b.and #t bs)))

(define-type-of $or Any)
(define $or (cambda $bs (foldl b.or #f bs)))

;;(define-type-of $b.and Any)
(define $b.and
  (lambda [$b1 $b2]
    (if b1
        b2
        #f)))

;;(define-type-of $b.or Any)
(define $b.or
  (lambda [$b1 $b2]
    (if b1
        #t
        b2)))

;;(define-type-of $not Any)
(define $not
  (lambda [$b]
    (match b bool
      {[,#t #f]
       [,#f #t]})))
