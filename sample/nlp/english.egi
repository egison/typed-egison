(define $chop
  (lambda [$l $xs]
    (match xs (list something)
      {[<snoc ,l $hs> (chop l hs)]
       [_ xs]})))

(define $partition
  (lambda [$in $ls]
    (match ls (list something)
      {[<join $xs <join ,in $rs>> {{@xs @in} @(partition in rs)}]
       [_ {ls}]})))


(define $split-to-paragraphs
  (lambda [$text]
    (map (chop '\n' $) (partition ".\n" text))))

(define $split-to-sentences
  (lambda [$ptext]
    (partition ". " ptext)))

(define $parse-sentence
  (lambda [$stext]
    (match stext string
      {[<snoc ,'.' $stext2> ['.' (split " " stext2)]]
       [<snoc ,'?' $stext2> ['?' (split " " stext2)]]
       [<snoc ,'!' $stext2> ['!' (split " " stext2)]]
       [$stext2 [undefined (split " " stext2)]]
       })))

;(test (map (map words $) (map sentences (paragraphs "I took a bath with my baby. After that I came the office.\nI'm looking foward to talking with you soon."))))
;(test (parse-sentence "I took a bath with my baby this morning."))
;(test (parse-sentence "Are you ready?"))

(define $repl
  (lambda []
    (do {[(write "egison-ime: ")]
         [(flush)]
         [$stext (read-line)]
         [(write (let {[[$l $stext2] (parse-sentence stext)]} stext2))]
         [(write "\n")]
         [(repl)]}
      [])))

(define $main
  (lambda [$args]
    (repl)))
