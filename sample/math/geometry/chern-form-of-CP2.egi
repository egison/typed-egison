(define $params [| z1 z2 z1' z2' |])
(define $params' [| z1 z2 # # |])
(define $params'' [| # # z1' z2' |])

(define $d
  (lambda [%X]
    !((flip ∂/∂) params X)))

(define $d'
  (lambda [%X]
    !((flip ∂/∂) params' X)))

(define $d''
  (lambda [%X]
    !((flip ∂/∂) params'' X)))

(define $h (+ 1 (* z1 z1') (* z2 z2')))

(define $ω (d' (log h)))
ω;[| (/ z1' (+ 1 (* z1 z1') (* z2 z2'))) (/ z2' (+ 1 (* z1 z1') (* z2 z2'))) 0 0 |]

(define $Ω (d'' ω))
Ω
;[|[| 0 0 0 0 |]
;  [| 0 0 0 0 |]
;  [| (/ (+ 1 (* z2 z2')) (+ 1 (* 2 z1 z1') (* 2 z2 z2') (* z1^2 z1'^2) (* 2 z1 z1' z2 z2') (* z2^2 z2'^2))) (/ (* -1 z1 z2') (+ 1 (* 2 z1 z1') (* 2 z2 z2') (* z1^2 z1'^2) (* 2 z1 z1' z2 z2') (* z2^2 z2'^2))) 0 0 |]
;  [| (/ (* -1 z2 z1') (+ 1 (* 2 z1 z1') (* 2 z2 z2') (* z1^2 z1'^2) (* 2 z1 z1' z2 z2') (* z2^2 z2'^2))) (/ (+ 1 (* z1 z1')) (+ 1 (* 2 z1 z1') (* 2 z2 z2') (* z1^2 z1'^2) (* 2 z1 z1' z2 z2') (* z2^2 z2'^2))) 0 0 |]|]

;(define $c1 (/ Ω (* -2 π i)))
;c1;[| [| 0 (/ r (+ -1 (* -2 r^2) (* -1 r^4))) |] [| (/ (* -1 r) (+ -1 (* -2 r^2) (* -1 r^4))) 0 |] |]



